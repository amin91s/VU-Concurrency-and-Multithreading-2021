package data_structures.implementation;import java.util.ArrayList;import data_structures.Sorted;import java.util.concurrent.locks.ReentrantLock;import java.util.concurrent.locks.Lock;public class CoarseGrainedList<T extends Comparable<T>> implements Sorted<T> {    private class Node{        T item;        Node next;        public Node(T t){            this.item = t;            this.next = null;        }    }    private final Node head = new Node(null);    private final Lock lock = new ReentrantLock();    public void add(T t) {        Node pred, curr;        lock.lock();        try {            pred = head;            curr = pred.next;            while (curr != null && curr.item.compareTo(t) <= 0){                pred = curr;                curr = curr.next;            }            Node node = new Node(t);            node.next = curr;            pred.next = node;        }finally {            lock.unlock();        }    }    public void remove(T t) {        Node curr, pred;        lock.lock();        try {            pred = head;            curr = pred.next;            while (curr != null && !curr.item.equals(t)){                pred = curr;                curr = curr.next;            }            if (curr != null){                pred.next = curr.next;            }        } finally {            lock.unlock();        }    }    public ArrayList<T> toArrayList() {        ArrayList<T> list = new ArrayList<>();        Node temp = head.next;        while (temp != null){            list.add(temp.item);            temp = temp.next;        }        return list;    }}